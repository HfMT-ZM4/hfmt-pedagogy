{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 7,
			"minor" : 3,
			"revision" : 4,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"rect" : [ 36.0, 80.0, 1368.0, 787.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 12.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 1,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 1,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 0,
		"toptoolbarpinned" : 0,
		"righttoolbarpinned" : 0,
		"bottomtoolbarpinned" : 0,
		"toolbars_unpinned_last_save" : 0,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "Default Max 7",
		"boxes" : [ 			{
				"box" : 				{
					"fontface" : 0,
					"fontsize" : 12.0,
					"id" : "obj-3",
					"linecount" : 63,
					"maxclass" : "o.compose",
					"numinlets" : 2,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 92.0, 857.0, 829.0, 867.0 ],
					"saved_bundle_data" : [ 35, 98, 117, 110, 100, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 47, 126, 47, 109, 97, 116, 99, 104, 105, 110, 103, 73, 110, 100, 101, 120, 101, 115, 0, 0, 44, 115, 0, 0, 108, 97, 109, 98, 100, 97, 40, 91, 118, 44, 32, 97, 114, 93, 44, 32, 10, 32, 32, 47, 95, 95, 95, 47, 114, 101, 116, 32, 61, 32, 91, 93, 44, 10, 32, 32, 109, 97, 112, 40, 32, 10, 32, 32, 32, 32, 108, 97, 109, 98, 100, 97, 40, 91, 105, 93, 44, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 32, 97, 114, 91, 91, 105, 93, 93, 32, 61, 61, 32, 118, 44, 32, 47, 95, 95, 95, 47, 114, 101, 116, 32, 61, 32, 91, 47, 95, 95, 95, 47, 114, 101, 116, 44, 32, 105, 93, 32, 41, 10, 32, 32, 32, 32, 41, 44, 32, 97, 115, 101, 113, 40, 48, 44, 32, 108, 101, 110, 103, 116, 104, 40, 97, 114, 41, 45, 49, 41, 10, 32, 32, 41, 44, 10, 32, 32, 112, 114, 111, 103, 49, 40, 32, 47, 95, 95, 95, 47, 114, 101, 116, 44, 32, 100, 101, 108, 101, 116, 101, 40, 47, 95, 95, 95, 47, 114, 101, 116, 41, 32, 41, 10, 41, 0, 0, 0, 0, 0, 76, 47, 126, 47, 105, 110, 100, 101, 120, 79, 102, 0, 0, 44, 115, 0, 0, 108, 97, 109, 98, 100, 97, 40, 91, 118, 44, 97, 114, 93, 44, 32, 109, 97, 120, 40, 97, 115, 101, 113, 40, 49, 44, 32, 108, 101, 110, 103, 116, 104, 40, 97, 114, 41, 41, 32, 42, 32, 40, 118, 32, 61, 61, 32, 97, 114, 41, 41, 32, 45, 32, 49, 32, 41, 0, 0, 0, 0, 0, 0, 104, 47, 110, 97, 109, 101, 115, 47, 108, 111, 119, 101, 114, 0, 0, 0, 0, 44, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 0, 0, 99, 0, 0, 0, 99, 35, 0, 0, 100, 98, 0, 0, 100, 0, 0, 0, 100, 35, 0, 0, 101, 98, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 102, 35, 0, 0, 103, 98, 0, 0, 103, 0, 0, 0, 103, 35, 0, 0, 97, 98, 0, 0, 97, 0, 0, 0, 97, 35, 0, 0, 98, 98, 0, 0, 98, 0, 0, 0, 0, 0, 0, 104, 47, 110, 97, 109, 101, 115, 47, 117, 112, 112, 101, 114, 0, 0, 0, 0, 44, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 0, 0, 67, 0, 0, 0, 67, 35, 0, 0, 68, 98, 0, 0, 68, 0, 0, 0, 68, 35, 0, 0, 69, 98, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 70, 35, 0, 0, 71, 98, 0, 0, 71, 0, 0, 0, 71, 35, 0, 0, 65, 98, 0, 0, 65, 0, 0, 0, 65, 35, 0, 0, 66, 98, 0, 0, 66, 0, 0, 0, 0, 0, 0, 100, 47, 110, 97, 109, 101, 115, 47, 115, 116, 101, 112, 0, 44, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 92, 47, 110, 0, 0, 44, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 4, 108, 47, 126, 47, 110, 116, 111, 109, 0, 44, 115, 0, 0, 108, 97, 109, 98, 100, 97, 40, 91, 110, 93, 44, 32, 10, 32, 32, 32, 32, 32, 32, 47, 116, 111, 107, 32, 61, 32, 115, 112, 108, 105, 116, 40, 34, 58, 34, 44, 32, 110, 32, 41, 44, 10, 32, 32, 32, 32, 32, 32, 47, 108, 101, 116, 116, 101, 114, 32, 61, 32, 47, 116, 111, 107, 91, 91, 48, 93, 93, 44, 10, 32, 32, 32, 32, 32, 32, 47, 108, 111, 119, 101, 114, 47, 116, 101, 115, 116, 32, 61, 32, 47, 108, 101, 116, 116, 101, 114, 32, 61, 61, 32, 47, 110, 97, 109, 101, 115, 47, 108, 111, 119, 101, 114, 44, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 32, 109, 97, 120, 40, 47, 108, 111, 119, 101, 114, 47, 116, 101, 115, 116, 41, 32, 62, 32, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 115, 116, 101, 112, 32, 61, 32, 47, 110, 97, 109, 101, 115, 47, 115, 116, 101, 112, 91, 91, 32, 109, 97, 120, 40, 32, 47, 108, 111, 119, 101, 114, 47, 116, 101, 115, 116, 32, 42, 32, 47, 110, 32, 41, 32, 45, 32, 49, 32, 93, 93, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 103, 110, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 117, 112, 112, 101, 114, 47, 116, 101, 115, 116, 32, 61, 32, 47, 108, 101, 116, 116, 101, 114, 32, 61, 61, 32, 47, 110, 97, 109, 101, 115, 47, 117, 112, 112, 101, 114, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 32, 109, 97, 120, 40, 47, 117, 112, 112, 101, 114, 47, 116, 101, 115, 116, 41, 32, 62, 32, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 115, 116, 101, 112, 32, 61, 32, 47, 110, 97, 109, 101, 115, 47, 115, 116, 101, 112, 91, 91, 32, 109, 97, 120, 40, 32, 47, 117, 112, 112, 101, 114, 47, 116, 101, 115, 116, 32, 42, 32, 47, 110, 32, 41, 32, 45, 32, 49, 32, 93, 93, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 41, 44, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 32, 108, 101, 110, 103, 116, 104, 40, 47, 116, 111, 107, 41, 32, 61, 61, 32, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 103, 110, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 109, 105, 110, 117, 115, 32, 61, 32, 115, 112, 108, 105, 116, 40, 34, 45, 34, 44, 32, 47, 116, 111, 107, 91, 91, 49, 93, 93, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 32, 108, 101, 110, 103, 116, 104, 40, 47, 109, 105, 110, 117, 115, 41, 32, 61, 61, 32, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 103, 110, 40, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 111, 99, 116, 32, 61, 32, 102, 108, 111, 97, 116, 51, 50, 40, 47, 109, 105, 110, 117, 115, 91, 91, 48, 93, 93, 41, 44, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 99, 101, 110, 116, 115, 32, 61, 32, 102, 108, 111, 97, 116, 51, 50, 40, 34, 45, 34, 43, 47, 109, 105, 110, 117, 115, 91, 91, 49, 93, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 103, 110, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 112, 108, 117, 115, 32, 61, 32, 115, 112, 108, 105, 116, 40, 34, 43, 34, 44, 32, 47, 116, 111, 107, 91, 91, 49, 93, 93, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 32, 108, 101, 110, 103, 116, 104, 40, 47, 112, 108, 117, 115, 41, 32, 61, 61, 32, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 103, 110, 40, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 111, 99, 116, 32, 61, 32, 102, 108, 111, 97, 116, 51, 50, 40, 47, 112, 108, 117, 115, 91, 91, 48, 93, 93, 41, 44, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 99, 101, 110, 116, 115, 32, 61, 32, 102, 108, 111, 97, 116, 51, 50, 40, 47, 112, 108, 117, 115, 91, 91, 49, 93, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 103, 110, 40, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 111, 99, 116, 32, 61, 32, 102, 108, 111, 97, 116, 51, 50, 40, 47, 116, 111, 107, 91, 91, 49, 93, 93, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 99, 101, 110, 116, 115, 32, 61, 32, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 41, 10, 32, 32, 32, 32, 32, 32, 41, 44, 10, 32, 32, 32, 32, 32, 32, 91, 47, 115, 116, 101, 112, 32, 43, 32, 40, 49, 50, 42, 40, 47, 111, 99, 116, 43, 49, 41, 41, 32, 43, 32, 40, 47, 99, 101, 110, 116, 115, 32, 42, 32, 48, 46, 48, 49, 41, 32, 93, 10, 41, 0, 0, 0, 0, 0, 24, 47, 116, 111, 107, 0, 0, 0, 0, 44, 115, 115, 0, 97, 0, 0, 0, 52, 43, 49, 52, 0, 0, 0, 0, 0, 0, 0, 16, 47, 108, 101, 116, 116, 101, 114, 0, 44, 115, 0, 0, 97, 0, 0, 0, 0, 0, 0, 32, 47, 108, 111, 119, 101, 114, 47, 116, 101, 115, 116, 0, 44, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 84, 70, 70, 70, 0, 0, 0, 0, 0, 16, 47, 115, 116, 101, 112, 0, 0, 0, 44, 105, 0, 0, 0, 0, 0, 9, 0, 0, 0, 20, 47, 109, 105, 110, 117, 115, 0, 0, 44, 115, 0, 0, 52, 43, 49, 52, 0, 0, 0, 0, 0, 0, 0, 20, 47, 112, 108, 117, 115, 0, 0, 0, 44, 115, 115, 0, 52, 0, 0, 0, 49, 52, 0, 0, 0, 0, 0, 16, 47, 111, 99, 116, 0, 0, 0, 0, 44, 102, 0, 0, 64, -128, 0, 0, 0, 0, 0, 16, 47, 99, 101, 110, 116, 115, 0, 0, 44, 102, 0, 0, 65, 96, 0, 0, 0, 0, 0, 20, 47, 116, 101, 115, 116, 0, 0, 0, 44, 100, 0, 0, 64, 81, 72, -11, -62, -113, 92, 41 ],
					"saved_bundle_length" : 2076,
					"text" : "/~/matchingIndexes : \"lambda([v, ar], \n  /___/ret = [],\n  map( \n    lambda([i],\n      if( ar[[i]] == v, /___/ret = [/___/ret, i] )\n    ), aseq(0, length(ar)-1)\n  ),\n  prog1( /___/ret, delete(/___/ret) )\n)\",\n/~/indexOf : \"lambda([v,ar], max(aseq(1, length(ar)) * (v == ar)) - 1 )\",\n/names/lower : [\"c\", \"c#\", \"db\", \"d\", \"d#\", \"eb\", \"e\", \"f\", \"f#\", \"gb\", \"g\", \"g#\", \"ab\", \"a\", \"a#\", \"bb\", \"b\"],\n/names/upper : [\"C\", \"C#\", \"Db\", \"D\", \"D#\", \"Eb\", \"E\", \"F\", \"F#\", \"Gb\", \"G\", \"G#\", \"Ab\", \"A\", \"A#\", \"Bb\", \"B\"],\n/names/step : [0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11],\n/n : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n/~/ntom : \"lambda([n], \n      /tok = split(\\\":\\\", n ),\n      /letter = /tok[[0]],\n      /lower/test = /letter == /names/lower,\n      if( max(/lower/test) > 0,\n        /step = /names/step[[ max( /lower/test * /n ) - 1 ]],\n        progn(\n          /upper/test = /letter == /names/upper,\n          if( max(/upper/test) > 0,\n            /step = /names/step[[ max( /upper/test * /n ) - 1 ]]\n          )\n        )\n      ),\n      if( length(/tok) == 2,\n        progn(\n          /minus = split(\\\"-\\\", /tok[[1]]),\n          if( length(/minus) == 2,\n            progn( \n              /oct = float32(/minus[[0]]), \n              /cents = float32(\\\"-\\\"+/minus[[1]])\n            ),\n            progn(\n              /plus = split(\\\"+\\\", /tok[[1]]),\n              if( length(/plus) == 2,\n                progn( \n                  /oct = float32(/plus[[0]]), \n                  /cents = float32(/plus[[1]])\n                ),\n                progn( \n                  /oct = float32(/tok[[1]]),\n                  /cents = 0\n                )\n              )\n            )\n          )\n        )\n      ),\n      [/step + (12*(/oct+1)) + (/cents * 0.01) ]\n)\",\n/tok : [\"a\", \"4+14\"],\n/letter : \"a\",\n/lower/test : [false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false],\n/step : 9,\n/minus : \"4+14\",\n/plus : [\"4\", \"14\"],\n/oct : 4.,\n/cents : 14.,\n/test : 69.14"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontsize" : 11.0,
					"id" : "obj-1",
					"linecount" : 57,
					"maxclass" : "o.expr.codebox",
					"numinlets" : 1,
					"numoutlets" : 2,
					"outlettype" : [ "FullPacket", "FullPacket" ],
					"patching_rect" : [ 89.0, 11.0, 793.0, 728.0 ],
					"presentation_rect" : [ 88.0, 29.0, 0.0, 0.0 ],
					"text" : "/~/matchingIndexes = quote(lambda([v, ar], \n  /___/ret = [],\n  map( \n    lambda([i],\n      if( ar[[i]] == v, /___/ret = [/___/ret, i] )\n    ), aseq(0, length(ar)-1)\n  ),\n  prog1( /___/ret, delete(/___/ret) )\n)),\n\n\n/~/indexOf = quote(lambda([v,ar], max(aseq(1, length(ar)) * (v == ar)) - 1 )),\n\n/~/ntom = quote(lambda([n], \n  /names/lower = [\"c\", \"c#\", \"db\", \"d\", \"d#\", \"eb\", \"e\", \"f\", \"f#\", \"gb\", \"g\", \"g#\", \"ab\", \"a\", \"a#\", \"bb\", \"b\" ],\t\n  /names/upper = [\"C\", \"C#\", \"Db\", \"D\", \"D#\", \"Eb\", \"E\", \"F\", \"F#\", \"Gb\", \"G\", \"G#\", \"Ab\", \"A\", \"A#\", \"Bb\", \"B\" ],\t\n  /names/step = [0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11],\n  /tok = split(\":\", n ),\n  /letter = /tok[[0]],\n  /lower/test = /letter == /names/lower,\n  if( max(/lower/test) > 0,\n    /step = /names/step[[ max( /lower/test * /n ) - 1 ]],\n    progn(\n      /upper/test = /letter == /names/upper,\n      if( max(/upper/test) > 0,\n        /step = /names/step[[ max( /upper/test * /n ) - 1 ]]\n      )\n    )\n  ),\n  if( length(/tok) == 2,\n    progn(\n      /minus = split(\"-\", /tok[[1]]),\n      if( length(/minus) == 2,\n        progn( \n          /oct = float32(/minus[[0]]), \n          /cents = float32(\"-\"+/minus[[1]])\n        ),\n        progn(\n          /plus = split(\"+\", /tok[[1]]),\n          if( length(/plus) == 2,\n            progn( \n              /oct = float32(/plus[[0]]), \n              /cents = float32(/plus[[1]])\n            ),\n            progn( \n              /oct = float32(/tok[[1]]),\n              /cents = 0\n            )\n          )\n        )\n      )\n    )\n  ),\n  [/step + (12*(/oct+1)) + (/cents * 0.01) ]\n)),\n\n/test = /~/ntom( \"a:4+14\" )"
				}

			}
, 			{
				"box" : 				{
					"fontface" : 0,
					"fontsize" : 11.0,
					"id" : "obj-2",
					"linecount" : 56,
					"maxclass" : "o.expr.codebox",
					"numinlets" : 1,
					"numoutlets" : 2,
					"outlettype" : [ "FullPacket", "FullPacket" ],
					"patching_rect" : [ 922.0, 36.0, 765.0, 716.0 ],
					"text" : "/base = (typetags(/prefix) != 's') ? \"/notes\" : /base ,\n/prefix = (typetags(/prefix) != 's') ? \"/midi\" : /prefix,\n\n/names/lower = [\"c\", \"c#\", \"db\", \"d\", \"d#\", \"eb\", \"e\", \"f\", \"f#\", \"gb\", \"g\", \"g#\", \"ab\", \"a\", \"a#\", \"bb\", \"b\" ],\t\n/names/upper = [\"C\", \"C#\", \"Db\", \"D\", \"D#\", \"Eb\", \"E\", \"F\", \"F#\", \"Gb\", \"G\", \"G#\", \"Ab\", \"A\", \"A#\", \"Bb\", \"B\" ],\t\n/names/step = [0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11],\n/n = aseq(1, length(/names/step)),\n\nmap(\n  lambda([a],\n   /outaddr = if( !strcmp(a, /base), /prefix, /prefix + a ),\n   assign(\"/_/__/___\"+/outaddr,  \n    map(\n      lambda([n], \n        /tok = split(\":\", n ),\n        /letter = /tok[[0]],\n        /lower/test = /letter == /names/lower,\n        if( sum(/lower/test) > 0,\n          /step = /names/step[[ sum( /lower/test * /n ) - 1 ]],\n          progn(\n            /upper/test = /letter == /names/upper,\n            if( sum(/upper/test) > 0,\n              /step = /names/step[[ sum( /upper/test * /n ) - 1 ]]\n            )\n          )\n        ),\n        \n        if( length(/tok) == 2,\n          progn(\n            /minus = split(\"-\", /tok[[1]]),\n            if( length(/minus) == 2,\n              progn( \n                /oct = float32(/minus[[0]]), \n                /cents = float32(\"-\"+/minus[[1]])\n              ),\n              progn(\n                /plus = split(\"+\", /tok[[1]]),\n                if( length(/plus) == 2,\n                  progn( \n                    /oct = float32(/plus[[0]]), \n                    /cents = float32(/plus[[1]])\n                  ),\n                  progn( \n                    /oct = float32(/tok[[1]]),\n                    /cents = 0\n                  )\n                )\n              )\n            )\n          )\n        ),\n        [/step + (12*(/oct+1)) + (/cents * 0.01) ]\n      ), value(a)\n    ))\n  ), /addrs\n)"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-1", 0 ]
				}

			}
 ],
		"dependency_cache" : [ 			{
				"name" : "o.expr.codebox.mxo",
				"type" : "iLaX"
			}
, 			{
				"name" : "o.compose.mxo",
				"type" : "iLaX"
			}
 ],
		"autosave" : 0,
		"bgfillcolor_type" : "gradient",
		"bgfillcolor_color1" : [ 0.376471, 0.384314, 0.4, 1.0 ],
		"bgfillcolor_color2" : [ 0.290196, 0.309804, 0.301961, 1.0 ],
		"bgfillcolor_color" : [ 0.290196, 0.309804, 0.301961, 1.0 ],
		"bgfillcolor_angle" : 270.0,
		"bgfillcolor_proportion" : 0.39
	}

}
